"""
Created on Thur June 29 15:44:58 2018

@author: Gustavo Cid (gustavo.cid@ektrum.com)
"""

import numpy as np
from scipy.interpolate import interp1d


class AntennaOmniSNEPA():

    def __init__(self):

        self.horizontal_pattern = None
        self.vertical_pattern = None

        # initializing the vertical pattern
        self.initialize_horizontal_pattern()
        self.initialize_vertical_pattern()

    def initialize_horizontal_pattern(self):
        """
        Initializes the antenna element horizontal radiation pattern.
        This is done in initialization time to save some computation
        :return: None
        """

        PHI_VALS = np.arange(-180, 180, step=1)
        G_H_VALS = [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 9.9500, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
                    10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 9.9500]

        self.horizontal_pattern = interp1d(PHI_VALS, G_H_VALS)

    def initialize_vertical_pattern(self):
        """
        Initializes the antenna element vertical radiation pattern.
        This is done in initialization time to save some computation
        :return: None
        """

        THETA_VALS = np.arange(-180, 180, step=1)
        G_V_VALS = [-0.0500, -0.0600, -0.0700, -0.0800, -0.0900, -0.1100, -0.1300, -0.1500, -0.1700, -0.1900, -0.2200,
                    -0.2400, -0.2700, -0.3000, -0.3300, -0.3600, -0.3900, -0.4300, -0.4900, -0.5400, -0.6000, -0.6600,
                    -0.7100, -0.7700, -0.8200, -0.8900, -0.9800, -1.0700, -1.1600, -1.2500, -1.3300, -1.4200, -1.5000,
                    -1.5900, -1.6800, -1.7600, -1.8600, -1.9600, -2.0600, -2.1600, -2.2600, -2.3700, -2.4900, -2.6000,
                    -2.7100, -2.8300, -2.9500, -3.0700, -3.1900, -3.3100, -3.4400, -3.5900, -3.7400, -3.8900, -4.0400,
                    -4.2000, -4.3500, -4.5100, -4.6500, -4.7900, -4.9300, -5.1000, -5.2800, -5.4600, -5.6500, -5.8000,
                    -5.9400, -6.0700, -6.2100, -6.5400, -6.8700, -7.0900, -7.3000, -7.4800, -7.6400, -7.7900, -7.9800,
                    -8.2800, -8.4800, -8.4800, -8.4900, -8.4900, -8.4900, -8.5000, -8.5000, -8.5000, -8.5100, -8.5100,
                    -8.5100, -8.5200, -8.5100, -8.5200, -8.5100, -8.5100, -8.5100, -8.5000, -8.5000, -8.5000, -8.4900,
                    -8.4900, -8.4900, -8.4800, -8.4800, -8.2800, -7.9800, -7.7900, -7.6400, -7.4800, -7.3000, -7.0900,
                    -6.8700, -6.5400, -6.2100, -6.0700, -5.9400, -5.8000, -5.6500, -5.4600, -5.2800, -5.1000, -4.9300,
                    -4.7900, -4.6500, -4.5100, -4.3500, -4.2000, -4.0400, -3.8900, -3.7400, -3.5900, -3.4400, -3.3100,
                    -3.1900, -3.0700, -2.9500, -2.8300, -2.7100, -2.6000, -2.4900, -2.3700, -2.2600, -2.1600, -2.0600,
                    -1.9600, -1.8600, -1.7600, -1.6800, -1.5900, -1.5000, -1.4200, -1.3300, -1.2500, -1.1600, -1.0700,
                    -0.9800, -0.8900, -0.8200, -0.7700, -0.7100, -0.6600, -0.6000, -0.5400, -0.4900, -0.4300, -0.3900,
                    -0.3600, -0.3300, -0.3000, -0.2700, -0.2400, -0.2200, -0.1900, -0.1700, -0.1500, -0.1300, -0.1100,
                    -0.0900, -0.0800, -0.0700, -0.0600, -0.0500, -0.0700, -0.0800, -0.0900, -0.1000, -0.1100, -0.1100,
                    -0.1300, -0.1500, -0.1800, -0.2100, -0.2400, -0.2800, -0.3200, -0.3500, -0.3900, -0.4300, -0.4700,
                    -0.5100, -0.5500, -0.6100, -0.6600, -0.7200, -0.7800, -0.8600, -0.9500, -1.0300, -1.1200, -1.2000,
                    -1.2700, -1.3400, -1.4100, -1.5000, -1.5900, -1.6900, -1.7800, -1.8800, -1.9800, -2.0900, -2.1900,
                    -2.2900, -2.4200, -2.5500, -2.6900, -2.8200, -2.9400, -3.0600, -3.1900, -3.3100, -3.4300, -3.5500,
                    -3.6900, -3.8500, -4.0000, -4.1500, -4.3200, -4.5500, -4.7200, -4.8300, -4.9300, -5.0400, -5.2100,
                    -5.3800, -5.5600, -5.7600, -5.9500, -6.1500, -6.3500, -6.5100, -6.6700, -6.8400, -7.1000, -7.4100,
                    -7.5700, -7.7000, -7.8300, -7.9500, -8.1000, -8.2500, -8.4000, -8.5500, -8.5800, -8.5900, -8.6000,
                    -8.6100, -8.6200, -8.6200, -8.6300, -8.6400, -8.6500, -8.6400, -8.6500, -8.6400, -8.6300, -8.6200,
                    -8.6200, -8.6100, -8.6000, -8.5900, -8.5800, -8.5500, -8.4000, -8.2500, -8.1000, -7.9500, -7.8300,
                    -7.7000, -7.5700, -7.4100, -7.1000, -6.8400, -6.6700, -6.5100, -6.3500, -6.1500, -5.9500, -5.7600,
                    -5.5600, -5.3800, -5.2100, -5.0400, -4.9300, -4.8300, -4.7200, -4.5500, -4.3200, -4.1500, -4.0000,
                    -3.8500, -3.6900, -3.5500, -3.4300, -3.3100, -3.1900, -3.0600, -2.9400, -2.8200, -2.6900, -2.5500,
                    -2.4200, -2.2900, -2.1900, -2.0900, -1.9800, -1.8800, -1.7800, -1.6900, -1.5900, -1.5000, -1.4100,
                    -1.3400, -1.2700, -1.2000, -1.1200, -1.0300, -0.9500, -0.8600, -0.7800, -0.7200, -0.6600, -0.6100,
                    -0.5500, -0.5100, -0.4700, -0.4300, -0.3900, -0.3500, -0.3200, -0.2800, -0.2400, -0.2100, -0.1800,
                    -0.1500, -0.1300, -0.1100, -0.1100, -0.1000, -0.0900, -0.0800, -0.0700]

        self.vertical_pattern = interp1d(THETA_VALS, G_V_VALS)

    def element_pattern(self, phi: np.array, theta: np.array) -> np.array:
        """
        Calculates the element radiation pattern gain
        :return: gain (np.array): element radiation pattern gain value
        """

        phi = np.clip(phi, -180, 179)

        # convert so that theta is measured with respect to the z-axis (and not x-axis)
        theta += 90.0
        theta = np.clip(theta, -180, 179)

        # horizontal gain
        g_h = self.horizontal_pattern(phi)

        # vertical gain
        g_v = self.vertical_pattern(theta)

        # element radiation pattern gain
        gain = g_h + g_v

        return gain
